syntax = "proto3";

package crawl_service;

message GetUserContestRecordRequest {
  string platform = 1;
  string handle = 2; // 用户名
}

message UserContestRecord {
  string profile_url = 1; // 用户页面URL
  int32 rating = 2; // 当前rating 没有参加过则为0
  int32 length = 3; // 参加比赛场次
  message Record {
    string name = 1; // 比赛名称
    string url = 2; // 比赛链接
    int64 timestamp = 3; // 比赛时间 单位：秒
    int32 rating = 4; // 结果rating
  }
  repeated Record record = 4;
  string platform = 5;
  string handle = 6; // 用户名
}

message GetUserSubmitRecordRequest {
  string platform = 1;
  string handle = 2; // 用户名
}

enum Verdict {
  Other = 0;
  Accepted = 1;
  WrongAnswer = 2;
  RuntimeError = 3;
  TimeLimitExceeded = 4;
  MemoryLimitExceeded = 5;
  CompilationError = 6;
  PresentationError = 7;
  IdlenessLimitExceeded = 8;
  SecurityViolated = 9;
  Crashed = 10;
  InputPreparationCrashed = 11;
  Partial = 12;
  Challenged = 13;
  Skipped = 14;
  Testing = 15;
  Rejected = 16;
  OutputLimitExceeded = 17;
}

enum ProgrammingLanguage {
  Unknown = 0;
  Cpp = 1;
  Java = 2;
  Python = 3;
  Golang = 4;
  C = 5;
  CSharp = 6;
  Kotlin = 7;
  JavaScript = 8;
  TypeScript = 9;
  Lua = 10;
  ObjectiveC = 11;
  Swift = 12;
  Rust = 13;
  Scala = 14;
  Pascal = 15;
  Haskell = 16;
  Ruby = 17;
  PHP = 18;
  Erlang = 19;
  Elixir = 20;
  Racket = 21;
}

message SubmitRecordData {
  string problem_name = 1; // 题目名
  string problem_url = 2; // 题目链接
  int64 submit_time = 3; // 提交时间戳 单位秒
  Verdict verdict = 4; // 提交状态
  int32 running_time = 5; // 代码运行时间 单位毫秒
  ProgrammingLanguage programming_language = 6; // 提交语言
}

message UserSubmitRecord {
  string profile_url = 1; // 用户页面URL
  int32 accept_count = 2; // 用户总AC数
  int32 submit_count = 3; // 用户总提交数
  map<int32, int32> distribution = 4; // 做题难度分布 有的平台才有
  map<string, int32> oj_distribution = 5; // OJ做题分布 只有vjudge有
  string platform = 6;
  string handle = 7;
  repeated SubmitRecordData submit_record_data = 8;
}

message GetRecentContestRequest {
  string platform = 1;
}

message RecentContest {
  message ContestMessage {
    string name = 1; // 比赛名称
    string url = 2; // 比赛地址
    int64 timestamp = 3; // 比赛开始时间 单位：秒
    map<string, string> ext_info = 4; // 额外信息
    int32 duration = 5; // 比赛时长 单位：秒
  }
  repeated ContestMessage recent_contest = 1;
  string platform = 2;
}

message MGetUserContestRecordRequest {
  repeated GetUserContestRecordRequest get_user_contest_record_request = 1;
}

message MGetUserContestRecordResponse {
  repeated UserContestRecord user_contest_record = 1;
}

message MGetUserSubmitRecordRequest {
  repeated GetUserSubmitRecordRequest get_user_submit_record_request = 1;
}

message MGetUserSubmitRecordResponse {
  repeated UserSubmitRecord user_submit_record = 1;
}

message MGetRecentContestRequest {
  repeated string platform = 1;
}

message MGetRecentContestResponse {
  repeated RecentContest recent_contest = 1;
}

message GetDailyQuestionRequest {
  string platform = 1;
}

message GetDailyQuestionResponse {
  message Problem {
    string platform = 1;
    string url = 2;
    string id = 3;
    string name = 4;
    string difficulty = 5;
    map<string, string> extra = 6;
  }
  repeated Problem problem = 1;
}

service CrawlService {
  rpc GetUserContestRecord (GetUserContestRecordRequest) returns (UserContestRecord);
  rpc GetUserSubmitRecord (GetUserSubmitRecordRequest) returns (UserSubmitRecord);
  rpc GetRecentContest (GetRecentContestRequest) returns (RecentContest);
  rpc MGetUserContestRecord (MGetUserContestRecordRequest) returns (MGetUserContestRecordResponse);
  rpc MGetUserSubmitRecord (MGetUserSubmitRecordRequest) returns (MGetUserSubmitRecordResponse);
  rpc MGetRecentContest (MGetRecentContestRequest) returns (MGetRecentContestResponse);
  rpc GetDailyQuestion (GetDailyQuestionRequest) returns (GetDailyQuestionResponse);
}