// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.21.2
// source: pb/crawl_service.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Verdict int32

const (
	Verdict_Other                   Verdict = 0
	Verdict_Accepted                Verdict = 1
	Verdict_WrongAnswer             Verdict = 2
	Verdict_RuntimeError            Verdict = 3
	Verdict_TimeLimitExceeded       Verdict = 4
	Verdict_MemoryLimitExceeded     Verdict = 5
	Verdict_CompilationError        Verdict = 6
	Verdict_PresentationError       Verdict = 7
	Verdict_IdlenessLimitExceeded   Verdict = 8
	Verdict_SecurityViolated        Verdict = 9
	Verdict_Crashed                 Verdict = 10
	Verdict_InputPreparationCrashed Verdict = 11
	Verdict_Partial                 Verdict = 12
	Verdict_Challenged              Verdict = 13
	Verdict_Skipped                 Verdict = 14
	Verdict_Testing                 Verdict = 15
	Verdict_Rejected                Verdict = 16
	Verdict_OutputLimitExceeded     Verdict = 17
)

// Enum value maps for Verdict.
var (
	Verdict_name = map[int32]string{
		0:  "Other",
		1:  "Accepted",
		2:  "WrongAnswer",
		3:  "RuntimeError",
		4:  "TimeLimitExceeded",
		5:  "MemoryLimitExceeded",
		6:  "CompilationError",
		7:  "PresentationError",
		8:  "IdlenessLimitExceeded",
		9:  "SecurityViolated",
		10: "Crashed",
		11: "InputPreparationCrashed",
		12: "Partial",
		13: "Challenged",
		14: "Skipped",
		15: "Testing",
		16: "Rejected",
		17: "OutputLimitExceeded",
	}
	Verdict_value = map[string]int32{
		"Other":                   0,
		"Accepted":                1,
		"WrongAnswer":             2,
		"RuntimeError":            3,
		"TimeLimitExceeded":       4,
		"MemoryLimitExceeded":     5,
		"CompilationError":        6,
		"PresentationError":       7,
		"IdlenessLimitExceeded":   8,
		"SecurityViolated":        9,
		"Crashed":                 10,
		"InputPreparationCrashed": 11,
		"Partial":                 12,
		"Challenged":              13,
		"Skipped":                 14,
		"Testing":                 15,
		"Rejected":                16,
		"OutputLimitExceeded":     17,
	}
)

func (x Verdict) Enum() *Verdict {
	p := new(Verdict)
	*p = x
	return p
}

func (x Verdict) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Verdict) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_crawl_service_proto_enumTypes[0].Descriptor()
}

func (Verdict) Type() protoreflect.EnumType {
	return &file_pb_crawl_service_proto_enumTypes[0]
}

func (x Verdict) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Verdict.Descriptor instead.
func (Verdict) EnumDescriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{0}
}

type ProgrammingLanguage int32

const (
	ProgrammingLanguage_Unknown    ProgrammingLanguage = 0
	ProgrammingLanguage_Cpp        ProgrammingLanguage = 1
	ProgrammingLanguage_Java       ProgrammingLanguage = 2
	ProgrammingLanguage_Python     ProgrammingLanguage = 3
	ProgrammingLanguage_Golang     ProgrammingLanguage = 4
	ProgrammingLanguage_C          ProgrammingLanguage = 5
	ProgrammingLanguage_CSharp     ProgrammingLanguage = 6
	ProgrammingLanguage_Kotlin     ProgrammingLanguage = 7
	ProgrammingLanguage_JavaScript ProgrammingLanguage = 8
	ProgrammingLanguage_TypeScript ProgrammingLanguage = 9
	ProgrammingLanguage_Lua        ProgrammingLanguage = 10
	ProgrammingLanguage_ObjectiveC ProgrammingLanguage = 11
	ProgrammingLanguage_Swift      ProgrammingLanguage = 12
	ProgrammingLanguage_Rust       ProgrammingLanguage = 13
	ProgrammingLanguage_Scala      ProgrammingLanguage = 14
	ProgrammingLanguage_Pascal     ProgrammingLanguage = 15
	ProgrammingLanguage_Haskell    ProgrammingLanguage = 16
	ProgrammingLanguage_Ruby       ProgrammingLanguage = 17
	ProgrammingLanguage_PHP        ProgrammingLanguage = 18
	ProgrammingLanguage_Erlang     ProgrammingLanguage = 19
	ProgrammingLanguage_Elixir     ProgrammingLanguage = 20
	ProgrammingLanguage_Racket     ProgrammingLanguage = 21
)

// Enum value maps for ProgrammingLanguage.
var (
	ProgrammingLanguage_name = map[int32]string{
		0:  "Unknown",
		1:  "Cpp",
		2:  "Java",
		3:  "Python",
		4:  "Golang",
		5:  "C",
		6:  "CSharp",
		7:  "Kotlin",
		8:  "JavaScript",
		9:  "TypeScript",
		10: "Lua",
		11: "ObjectiveC",
		12: "Swift",
		13: "Rust",
		14: "Scala",
		15: "Pascal",
		16: "Haskell",
		17: "Ruby",
		18: "PHP",
		19: "Erlang",
		20: "Elixir",
		21: "Racket",
	}
	ProgrammingLanguage_value = map[string]int32{
		"Unknown":    0,
		"Cpp":        1,
		"Java":       2,
		"Python":     3,
		"Golang":     4,
		"C":          5,
		"CSharp":     6,
		"Kotlin":     7,
		"JavaScript": 8,
		"TypeScript": 9,
		"Lua":        10,
		"ObjectiveC": 11,
		"Swift":      12,
		"Rust":       13,
		"Scala":      14,
		"Pascal":     15,
		"Haskell":    16,
		"Ruby":       17,
		"PHP":        18,
		"Erlang":     19,
		"Elixir":     20,
		"Racket":     21,
	}
)

func (x ProgrammingLanguage) Enum() *ProgrammingLanguage {
	p := new(ProgrammingLanguage)
	*p = x
	return p
}

func (x ProgrammingLanguage) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ProgrammingLanguage) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_crawl_service_proto_enumTypes[1].Descriptor()
}

func (ProgrammingLanguage) Type() protoreflect.EnumType {
	return &file_pb_crawl_service_proto_enumTypes[1]
}

func (x ProgrammingLanguage) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ProgrammingLanguage.Descriptor instead.
func (ProgrammingLanguage) EnumDescriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{1}
}

type GetUserContestRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Handle   string `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"` // 用户名
}

func (x *GetUserContestRecordRequest) Reset() {
	*x = GetUserContestRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserContestRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserContestRecordRequest) ProtoMessage() {}

func (x *GetUserContestRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserContestRecordRequest.ProtoReflect.Descriptor instead.
func (*GetUserContestRecordRequest) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{0}
}

func (x *GetUserContestRecordRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetUserContestRecordRequest) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

type UserContestRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileUrl string                      `protobuf:"bytes,1,opt,name=profile_url,json=profileUrl,proto3" json:"profile_url,omitempty"` // 用户页面URL
	Rating     int32                       `protobuf:"varint,2,opt,name=rating,proto3" json:"rating,omitempty"`                          // 当前rating 没有参加过则为0
	Length     int32                       `protobuf:"varint,3,opt,name=length,proto3" json:"length,omitempty"`                          // 参加比赛场次
	Record     []*UserContestRecord_Record `protobuf:"bytes,4,rep,name=record,proto3" json:"record,omitempty"`
	Platform   string                      `protobuf:"bytes,5,opt,name=platform,proto3" json:"platform,omitempty"`
	Handle     string                      `protobuf:"bytes,6,opt,name=handle,proto3" json:"handle,omitempty"` // 用户名
}

func (x *UserContestRecord) Reset() {
	*x = UserContestRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContestRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContestRecord) ProtoMessage() {}

func (x *UserContestRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContestRecord.ProtoReflect.Descriptor instead.
func (*UserContestRecord) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{1}
}

func (x *UserContestRecord) GetProfileUrl() string {
	if x != nil {
		return x.ProfileUrl
	}
	return ""
}

func (x *UserContestRecord) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

func (x *UserContestRecord) GetLength() int32 {
	if x != nil {
		return x.Length
	}
	return 0
}

func (x *UserContestRecord) GetRecord() []*UserContestRecord_Record {
	if x != nil {
		return x.Record
	}
	return nil
}

func (x *UserContestRecord) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserContestRecord) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

type GetUserSubmitRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Handle   string `protobuf:"bytes,2,opt,name=handle,proto3" json:"handle,omitempty"` // 用户名
}

func (x *GetUserSubmitRecordRequest) Reset() {
	*x = GetUserSubmitRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetUserSubmitRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetUserSubmitRecordRequest) ProtoMessage() {}

func (x *GetUserSubmitRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetUserSubmitRecordRequest.ProtoReflect.Descriptor instead.
func (*GetUserSubmitRecordRequest) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{2}
}

func (x *GetUserSubmitRecordRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetUserSubmitRecordRequest) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

type SubmitRecordData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProblemName         string              `protobuf:"bytes,1,opt,name=problem_name,json=problemName,proto3" json:"problem_name,omitempty"`                                                                 // 题目名
	ProblemUrl          string              `protobuf:"bytes,2,opt,name=problem_url,json=problemUrl,proto3" json:"problem_url,omitempty"`                                                                    // 题目链接
	SubmitTime          int64               `protobuf:"varint,3,opt,name=submit_time,json=submitTime,proto3" json:"submit_time,omitempty"`                                                                   // 提交时间戳 单位秒
	Verdict             Verdict             `protobuf:"varint,4,opt,name=verdict,proto3,enum=crawl_service.Verdict" json:"verdict,omitempty"`                                                                // 提交状态
	RunningTime         int32               `protobuf:"varint,5,opt,name=running_time,json=runningTime,proto3" json:"running_time,omitempty"`                                                                // 代码运行时间 单位毫秒
	ProgrammingLanguage ProgrammingLanguage `protobuf:"varint,6,opt,name=programming_language,json=programmingLanguage,proto3,enum=crawl_service.ProgrammingLanguage" json:"programming_language,omitempty"` // 提交语言
}

func (x *SubmitRecordData) Reset() {
	*x = SubmitRecordData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubmitRecordData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubmitRecordData) ProtoMessage() {}

func (x *SubmitRecordData) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubmitRecordData.ProtoReflect.Descriptor instead.
func (*SubmitRecordData) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{3}
}

func (x *SubmitRecordData) GetProblemName() string {
	if x != nil {
		return x.ProblemName
	}
	return ""
}

func (x *SubmitRecordData) GetProblemUrl() string {
	if x != nil {
		return x.ProblemUrl
	}
	return ""
}

func (x *SubmitRecordData) GetSubmitTime() int64 {
	if x != nil {
		return x.SubmitTime
	}
	return 0
}

func (x *SubmitRecordData) GetVerdict() Verdict {
	if x != nil {
		return x.Verdict
	}
	return Verdict_Other
}

func (x *SubmitRecordData) GetRunningTime() int32 {
	if x != nil {
		return x.RunningTime
	}
	return 0
}

func (x *SubmitRecordData) GetProgrammingLanguage() ProgrammingLanguage {
	if x != nil {
		return x.ProgrammingLanguage
	}
	return ProgrammingLanguage_Unknown
}

type UserSubmitRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProfileUrl       string              `protobuf:"bytes,1,opt,name=profile_url,json=profileUrl,proto3" json:"profile_url,omitempty"`                                                                                                      // 用户页面URL
	AcceptCount      int32               `protobuf:"varint,2,opt,name=accept_count,json=acceptCount,proto3" json:"accept_count,omitempty"`                                                                                                  // 用户总AC数
	SubmitCount      int32               `protobuf:"varint,3,opt,name=submit_count,json=submitCount,proto3" json:"submit_count,omitempty"`                                                                                                  // 用户总提交数
	Distribution     map[int32]int32     `protobuf:"bytes,4,rep,name=distribution,proto3" json:"distribution,omitempty" protobuf_key:"varint,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"`                          // 做题难度分布 有的平台才有
	OjDistribution   map[string]int32    `protobuf:"bytes,5,rep,name=oj_distribution,json=ojDistribution,proto3" json:"oj_distribution,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"varint,2,opt,name=value,proto3"` // OJ做题分布 只有vjudge有
	Platform         string              `protobuf:"bytes,6,opt,name=platform,proto3" json:"platform,omitempty"`
	Handle           string              `protobuf:"bytes,7,opt,name=handle,proto3" json:"handle,omitempty"`
	SubmitRecordData []*SubmitRecordData `protobuf:"bytes,8,rep,name=submit_record_data,json=submitRecordData,proto3" json:"submit_record_data,omitempty"`
}

func (x *UserSubmitRecord) Reset() {
	*x = UserSubmitRecord{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserSubmitRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserSubmitRecord) ProtoMessage() {}

func (x *UserSubmitRecord) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserSubmitRecord.ProtoReflect.Descriptor instead.
func (*UserSubmitRecord) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{4}
}

func (x *UserSubmitRecord) GetProfileUrl() string {
	if x != nil {
		return x.ProfileUrl
	}
	return ""
}

func (x *UserSubmitRecord) GetAcceptCount() int32 {
	if x != nil {
		return x.AcceptCount
	}
	return 0
}

func (x *UserSubmitRecord) GetSubmitCount() int32 {
	if x != nil {
		return x.SubmitCount
	}
	return 0
}

func (x *UserSubmitRecord) GetDistribution() map[int32]int32 {
	if x != nil {
		return x.Distribution
	}
	return nil
}

func (x *UserSubmitRecord) GetOjDistribution() map[string]int32 {
	if x != nil {
		return x.OjDistribution
	}
	return nil
}

func (x *UserSubmitRecord) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *UserSubmitRecord) GetHandle() string {
	if x != nil {
		return x.Handle
	}
	return ""
}

func (x *UserSubmitRecord) GetSubmitRecordData() []*SubmitRecordData {
	if x != nil {
		return x.SubmitRecordData
	}
	return nil
}

type GetRecentContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *GetRecentContestRequest) Reset() {
	*x = GetRecentContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetRecentContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetRecentContestRequest) ProtoMessage() {}

func (x *GetRecentContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetRecentContestRequest.ProtoReflect.Descriptor instead.
func (*GetRecentContestRequest) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{5}
}

func (x *GetRecentContestRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type RecentContest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentContest []*RecentContest_ContestMessage `protobuf:"bytes,1,rep,name=recent_contest,json=recentContest,proto3" json:"recent_contest,omitempty"`
	Platform      string                          `protobuf:"bytes,2,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *RecentContest) Reset() {
	*x = RecentContest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentContest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentContest) ProtoMessage() {}

func (x *RecentContest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentContest.ProtoReflect.Descriptor instead.
func (*RecentContest) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{6}
}

func (x *RecentContest) GetRecentContest() []*RecentContest_ContestMessage {
	if x != nil {
		return x.RecentContest
	}
	return nil
}

func (x *RecentContest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type MGetUserContestRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetUserContestRecordRequest []*GetUserContestRecordRequest `protobuf:"bytes,1,rep,name=get_user_contest_record_request,json=getUserContestRecordRequest,proto3" json:"get_user_contest_record_request,omitempty"`
}

func (x *MGetUserContestRecordRequest) Reset() {
	*x = MGetUserContestRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetUserContestRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetUserContestRecordRequest) ProtoMessage() {}

func (x *MGetUserContestRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetUserContestRecordRequest.ProtoReflect.Descriptor instead.
func (*MGetUserContestRecordRequest) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{7}
}

func (x *MGetUserContestRecordRequest) GetGetUserContestRecordRequest() []*GetUserContestRecordRequest {
	if x != nil {
		return x.GetUserContestRecordRequest
	}
	return nil
}

type MGetUserContestRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserContestRecord []*UserContestRecord `protobuf:"bytes,1,rep,name=user_contest_record,json=userContestRecord,proto3" json:"user_contest_record,omitempty"`
}

func (x *MGetUserContestRecordResponse) Reset() {
	*x = MGetUserContestRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetUserContestRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetUserContestRecordResponse) ProtoMessage() {}

func (x *MGetUserContestRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetUserContestRecordResponse.ProtoReflect.Descriptor instead.
func (*MGetUserContestRecordResponse) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{8}
}

func (x *MGetUserContestRecordResponse) GetUserContestRecord() []*UserContestRecord {
	if x != nil {
		return x.UserContestRecord
	}
	return nil
}

type MGetUserSubmitRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GetUserSubmitRecordRequest []*GetUserSubmitRecordRequest `protobuf:"bytes,1,rep,name=get_user_submit_record_request,json=getUserSubmitRecordRequest,proto3" json:"get_user_submit_record_request,omitempty"`
}

func (x *MGetUserSubmitRecordRequest) Reset() {
	*x = MGetUserSubmitRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetUserSubmitRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetUserSubmitRecordRequest) ProtoMessage() {}

func (x *MGetUserSubmitRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetUserSubmitRecordRequest.ProtoReflect.Descriptor instead.
func (*MGetUserSubmitRecordRequest) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{9}
}

func (x *MGetUserSubmitRecordRequest) GetGetUserSubmitRecordRequest() []*GetUserSubmitRecordRequest {
	if x != nil {
		return x.GetUserSubmitRecordRequest
	}
	return nil
}

type MGetUserSubmitRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserSubmitRecord []*UserSubmitRecord `protobuf:"bytes,1,rep,name=user_submit_record,json=userSubmitRecord,proto3" json:"user_submit_record,omitempty"`
}

func (x *MGetUserSubmitRecordResponse) Reset() {
	*x = MGetUserSubmitRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetUserSubmitRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetUserSubmitRecordResponse) ProtoMessage() {}

func (x *MGetUserSubmitRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetUserSubmitRecordResponse.ProtoReflect.Descriptor instead.
func (*MGetUserSubmitRecordResponse) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{10}
}

func (x *MGetUserSubmitRecordResponse) GetUserSubmitRecord() []*UserSubmitRecord {
	if x != nil {
		return x.UserSubmitRecord
	}
	return nil
}

type MGetRecentContestRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform []string `protobuf:"bytes,1,rep,name=platform,proto3" json:"platform,omitempty"`
}

func (x *MGetRecentContestRequest) Reset() {
	*x = MGetRecentContestRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetRecentContestRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetRecentContestRequest) ProtoMessage() {}

func (x *MGetRecentContestRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetRecentContestRequest.ProtoReflect.Descriptor instead.
func (*MGetRecentContestRequest) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{11}
}

func (x *MGetRecentContestRequest) GetPlatform() []string {
	if x != nil {
		return x.Platform
	}
	return nil
}

type MGetRecentContestResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RecentContest []*RecentContest `protobuf:"bytes,1,rep,name=recent_contest,json=recentContest,proto3" json:"recent_contest,omitempty"`
}

func (x *MGetRecentContestResponse) Reset() {
	*x = MGetRecentContestResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MGetRecentContestResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MGetRecentContestResponse) ProtoMessage() {}

func (x *MGetRecentContestResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MGetRecentContestResponse.ProtoReflect.Descriptor instead.
func (*MGetRecentContestResponse) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{12}
}

func (x *MGetRecentContestResponse) GetRecentContest() []*RecentContest {
	if x != nil {
		return x.RecentContest
	}
	return nil
}

type GetDailyQuestionRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform string `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
}

func (x *GetDailyQuestionRequest) Reset() {
	*x = GetDailyQuestionRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyQuestionRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyQuestionRequest) ProtoMessage() {}

func (x *GetDailyQuestionRequest) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyQuestionRequest.ProtoReflect.Descriptor instead.
func (*GetDailyQuestionRequest) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{13}
}

func (x *GetDailyQuestionRequest) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

type GetDailyQuestionResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Problem []*GetDailyQuestionResponse_Problem `protobuf:"bytes,1,rep,name=problem,proto3" json:"problem,omitempty"`
}

func (x *GetDailyQuestionResponse) Reset() {
	*x = GetDailyQuestionResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyQuestionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyQuestionResponse) ProtoMessage() {}

func (x *GetDailyQuestionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyQuestionResponse.ProtoReflect.Descriptor instead.
func (*GetDailyQuestionResponse) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{14}
}

func (x *GetDailyQuestionResponse) GetProblem() []*GetDailyQuestionResponse_Problem {
	if x != nil {
		return x.Problem
	}
	return nil
}

type UserContestRecord_Record struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`            // 比赛名称
	Url       string `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`              // 比赛链接
	Timestamp int64  `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"` // 比赛时间 单位：秒
	Rating    int32  `protobuf:"varint,4,opt,name=rating,proto3" json:"rating,omitempty"`       // 结果rating
}

func (x *UserContestRecord_Record) Reset() {
	*x = UserContestRecord_Record{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UserContestRecord_Record) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserContestRecord_Record) ProtoMessage() {}

func (x *UserContestRecord_Record) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserContestRecord_Record.ProtoReflect.Descriptor instead.
func (*UserContestRecord_Record) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{1, 0}
}

func (x *UserContestRecord_Record) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *UserContestRecord_Record) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *UserContestRecord_Record) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *UserContestRecord_Record) GetRating() int32 {
	if x != nil {
		return x.Rating
	}
	return 0
}

type RecentContest_ContestMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Name      string            `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`                                                                                                              // 比赛名称
	Url       string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`                                                                                                                // 比赛地址
	Timestamp int64             `protobuf:"varint,3,opt,name=timestamp,proto3" json:"timestamp,omitempty"`                                                                                                   // 比赛开始时间 单位：秒
	ExtInfo   map[string]string `protobuf:"bytes,4,rep,name=ext_info,json=extInfo,proto3" json:"ext_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"` // 额外信息
	Duration  int32             `protobuf:"varint,5,opt,name=duration,proto3" json:"duration,omitempty"`                                                                                                     // 比赛时长 单位：秒
}

func (x *RecentContest_ContestMessage) Reset() {
	*x = RecentContest_ContestMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RecentContest_ContestMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RecentContest_ContestMessage) ProtoMessage() {}

func (x *RecentContest_ContestMessage) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RecentContest_ContestMessage.ProtoReflect.Descriptor instead.
func (*RecentContest_ContestMessage) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{6, 0}
}

func (x *RecentContest_ContestMessage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *RecentContest_ContestMessage) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *RecentContest_ContestMessage) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *RecentContest_ContestMessage) GetExtInfo() map[string]string {
	if x != nil {
		return x.ExtInfo
	}
	return nil
}

func (x *RecentContest_ContestMessage) GetDuration() int32 {
	if x != nil {
		return x.Duration
	}
	return 0
}

type GetDailyQuestionResponse_Problem struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Platform   string            `protobuf:"bytes,1,opt,name=platform,proto3" json:"platform,omitempty"`
	Url        string            `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	Id         string            `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
	Name       string            `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Difficulty string            `protobuf:"bytes,5,opt,name=difficulty,proto3" json:"difficulty,omitempty"`
	Extra      map[string]string `protobuf:"bytes,6,rep,name=extra,proto3" json:"extra,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *GetDailyQuestionResponse_Problem) Reset() {
	*x = GetDailyQuestionResponse_Problem{}
	if protoimpl.UnsafeEnabled {
		mi := &file_pb_crawl_service_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GetDailyQuestionResponse_Problem) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetDailyQuestionResponse_Problem) ProtoMessage() {}

func (x *GetDailyQuestionResponse_Problem) ProtoReflect() protoreflect.Message {
	mi := &file_pb_crawl_service_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetDailyQuestionResponse_Problem.ProtoReflect.Descriptor instead.
func (*GetDailyQuestionResponse_Problem) Descriptor() ([]byte, []int) {
	return file_pb_crawl_service_proto_rawDescGZIP(), []int{14, 0}
}

func (x *GetDailyQuestionResponse_Problem) GetPlatform() string {
	if x != nil {
		return x.Platform
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetDifficulty() string {
	if x != nil {
		return x.Difficulty
	}
	return ""
}

func (x *GetDailyQuestionResponse_Problem) GetExtra() map[string]string {
	if x != nil {
		return x.Extra
	}
	return nil
}

var File_pb_crawl_service_proto protoreflect.FileDescriptor

var file_pb_crawl_service_proto_rawDesc = []byte{
	0x0a, 0x16, 0x70, 0x62, 0x2f, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0d, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x22, 0x51, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f,
	0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xbf, 0x02, 0x0a, 0x11, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x6c, 0x65, 0x6e,
	0x67, 0x74, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6c, 0x65, 0x6e, 0x67, 0x74,
	0x68, 0x12, 0x3f, 0x0a, 0x06, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x18, 0x04, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x27, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2e, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x06, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16,
	0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x1a, 0x64, 0x0a, 0x06, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x22, 0x50, 0x0a, 0x1a,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x22, 0xa3,
	0x02, 0x0a, 0x10, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x44,
	0x61, 0x74, 0x61, 0x12, 0x21, 0x0a, 0x0c, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x62, 0x6c, 0x65,
	0x6d, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x55, 0x72, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x73, 0x75,
	0x62, 0x6d, 0x69, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x30, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x64,
	0x69, 0x63, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x16, 0x2e, 0x63, 0x72, 0x61, 0x77,
	0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63,
	0x74, 0x52, 0x07, 0x76, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x75,
	0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x72, 0x75, 0x6e, 0x6e, 0x69, 0x6e, 0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x55, 0x0a,
	0x14, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x5f, 0x6c, 0x61, 0x6e,
	0x67, 0x75, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x67,
	0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x52,
	0x13, 0x70, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x61, 0x6e, 0x67,
	0x75, 0x61, 0x67, 0x65, 0x22, 0xb5, 0x04, 0x0a, 0x10, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x70, 0x72, 0x6f,
	0x66, 0x69, 0x6c, 0x65, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x66, 0x69, 0x6c, 0x65, 0x55, 0x72, 0x6c, 0x12, 0x21, 0x0a, 0x0c, 0x61, 0x63,
	0x63, 0x65, 0x70, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x70, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x21, 0x0a,
	0x0c, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x55, 0x0a, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x31, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0c, 0x64, 0x69, 0x73, 0x74, 0x72,
	0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x5c, 0x0a, 0x0f, 0x6f, 0x6a, 0x5f, 0x64, 0x69,
	0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x33, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2e, 0x4f, 0x6a, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e,
	0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0e, 0x6f, 0x6a, 0x44, 0x69, 0x73, 0x74, 0x72, 0x69, 0x62,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72,
	0x6d, 0x12, 0x16, 0x0a, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x68, 0x61, 0x6e, 0x64, 0x6c, 0x65, 0x12, 0x4d, 0x0a, 0x12, 0x73, 0x75, 0x62,
	0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18,
	0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x52, 0x10, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x44, 0x61, 0x74, 0x61, 0x1a, 0x3f, 0x0a, 0x11, 0x44, 0x69, 0x73, 0x74,
	0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x1a, 0x41, 0x0a, 0x13, 0x4f, 0x6a, 0x44,
	0x69, 0x73, 0x74, 0x72, 0x69, 0x62, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b,
	0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x35, 0x0a, 0x17,
	0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66,
	0x6f, 0x72, 0x6d, 0x22, 0x83, 0x03, 0x0a, 0x0d, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x52, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f,
	0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2b, 0x2e,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65,
	0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65,
	0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x1a, 0x81, 0x02, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73,
	0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x10, 0x0a, 0x03,
	0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c, 0x12, 0x1c,
	0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x53, 0x0a, 0x08,
	0x65, 0x78, 0x74, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x38,
	0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52,
	0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x45, 0x78, 0x74, 0x49,
	0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x07, 0x65, 0x78, 0x74, 0x49, 0x6e, 0x66,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x1a, 0x3a, 0x0a,
	0x0c, 0x45, 0x78, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a,
	0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x90, 0x01, 0x0a, 0x1c, 0x4d, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x70, 0x0a, 0x1f, 0x67, 0x65,
	0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52,
	0x1b, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x71, 0x0a, 0x1d,
	0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x50, 0x0a,
	0x13, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x11, 0x75, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22,
	0x8c, 0x01, 0x0a, 0x1b, 0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x6d, 0x0a, 0x1e, 0x67, 0x65, 0x74, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x5f, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x5f, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x52, 0x1a, 0x67, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x22, 0x6d,
	0x0a, 0x1c, 0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d,
	0x0a, 0x12, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x73, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x5f, 0x72, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x10, 0x75, 0x73, 0x65,
	0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x22, 0x36, 0x0a,
	0x18, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65,
	0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61,
	0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0x60, 0x0a, 0x19, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x43, 0x0a, 0x0e, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x5f, 0x63, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x63, 0x72, 0x61,
	0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x63, 0x65, 0x6e, 0x74,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x22, 0x35, 0x0a, 0x17, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x22, 0xef,
	0x02, 0x0a, 0x18, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74,
	0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x49, 0x0a, 0x07, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2f, 0x2e, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74,
	0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x52, 0x07, 0x70,
	0x72, 0x6f, 0x62, 0x6c, 0x65, 0x6d, 0x1a, 0x87, 0x02, 0x0a, 0x07, 0x50, 0x72, 0x6f, 0x62, 0x6c,
	0x65, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x12, 0x10,
	0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x75, 0x72, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63, 0x75, 0x6c,
	0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x64, 0x69, 0x66, 0x66, 0x69, 0x63,
	0x75, 0x6c, 0x74, 0x79, 0x12, 0x50, 0x0a, 0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x18, 0x06, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x3a, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x62, 0x6c, 0x65, 0x6d, 0x2e, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52,
	0x05, 0x65, 0x78, 0x74, 0x72, 0x61, 0x1a, 0x38, 0x0a, 0x0a, 0x45, 0x78, 0x74, 0x72, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x2a, 0xdb, 0x02, 0x0a, 0x07, 0x56, 0x65, 0x72, 0x64, 0x69, 0x63, 0x74, 0x12, 0x09, 0x0a, 0x05,
	0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x63, 0x63, 0x65, 0x70,
	0x74, 0x65, 0x64, 0x10, 0x01, 0x12, 0x0f, 0x0a, 0x0b, 0x57, 0x72, 0x6f, 0x6e, 0x67, 0x41, 0x6e,
	0x73, 0x77, 0x65, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x52, 0x75, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x69, 0x6d, 0x65,
	0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x04, 0x12,
	0x17, 0x0a, 0x13, 0x4d, 0x65, 0x6d, 0x6f, 0x72, 0x79, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78,
	0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x05, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6d, 0x70,
	0x69, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x50, 0x72, 0x65, 0x73, 0x65, 0x6e, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x10, 0x07, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x64, 0x6c, 0x65, 0x6e, 0x65, 0x73,
	0x73, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x08,
	0x12, 0x14, 0x0a, 0x10, 0x53, 0x65, 0x63, 0x75, 0x72, 0x69, 0x74, 0x79, 0x56, 0x69, 0x6f, 0x6c,
	0x61, 0x74, 0x65, 0x64, 0x10, 0x09, 0x12, 0x0b, 0x0a, 0x07, 0x43, 0x72, 0x61, 0x73, 0x68, 0x65,
	0x64, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x50, 0x72, 0x65, 0x70,
	0x61, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x43, 0x72, 0x61, 0x73, 0x68, 0x65, 0x64, 0x10, 0x0b,
	0x12, 0x0b, 0x0a, 0x07, 0x50, 0x61, 0x72, 0x74, 0x69, 0x61, 0x6c, 0x10, 0x0c, 0x12, 0x0e, 0x0a,
	0x0a, 0x43, 0x68, 0x61, 0x6c, 0x6c, 0x65, 0x6e, 0x67, 0x65, 0x64, 0x10, 0x0d, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x10, 0x0e, 0x12, 0x0b, 0x0a, 0x07, 0x54, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x67, 0x10, 0x0f, 0x12, 0x0c, 0x0a, 0x08, 0x52, 0x65, 0x6a, 0x65, 0x63,
	0x74, 0x65, 0x64, 0x10, 0x10, 0x12, 0x17, 0x0a, 0x13, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x45, 0x78, 0x63, 0x65, 0x65, 0x64, 0x65, 0x64, 0x10, 0x11, 0x2a, 0x95,
	0x02, 0x0a, 0x13, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x61, 0x6d, 0x6d, 0x69, 0x6e, 0x67, 0x4c, 0x61,
	0x6e, 0x67, 0x75, 0x61, 0x67, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x6e, 0x6b, 0x6e, 0x6f, 0x77,
	0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x70, 0x70, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04,
	0x4a, 0x61, 0x76, 0x61, 0x10, 0x02, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x79, 0x74, 0x68, 0x6f, 0x6e,
	0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x47, 0x6f, 0x6c, 0x61, 0x6e, 0x67, 0x10, 0x04, 0x12, 0x05,
	0x0a, 0x01, 0x43, 0x10, 0x05, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x53, 0x68, 0x61, 0x72, 0x70, 0x10,
	0x06, 0x12, 0x0a, 0x0a, 0x06, 0x4b, 0x6f, 0x74, 0x6c, 0x69, 0x6e, 0x10, 0x07, 0x12, 0x0e, 0x0a,
	0x0a, 0x4a, 0x61, 0x76, 0x61, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x08, 0x12, 0x0e, 0x0a,
	0x0a, 0x54, 0x79, 0x70, 0x65, 0x53, 0x63, 0x72, 0x69, 0x70, 0x74, 0x10, 0x09, 0x12, 0x07, 0x0a,
	0x03, 0x4c, 0x75, 0x61, 0x10, 0x0a, 0x12, 0x0e, 0x0a, 0x0a, 0x4f, 0x62, 0x6a, 0x65, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x43, 0x10, 0x0b, 0x12, 0x09, 0x0a, 0x05, 0x53, 0x77, 0x69, 0x66, 0x74, 0x10,
	0x0c, 0x12, 0x08, 0x0a, 0x04, 0x52, 0x75, 0x73, 0x74, 0x10, 0x0d, 0x12, 0x09, 0x0a, 0x05, 0x53,
	0x63, 0x61, 0x6c, 0x61, 0x10, 0x0e, 0x12, 0x0a, 0x0a, 0x06, 0x50, 0x61, 0x73, 0x63, 0x61, 0x6c,
	0x10, 0x0f, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x61, 0x73, 0x6b, 0x65, 0x6c, 0x6c, 0x10, 0x10, 0x12,
	0x08, 0x0a, 0x04, 0x52, 0x75, 0x62, 0x79, 0x10, 0x11, 0x12, 0x07, 0x0a, 0x03, 0x50, 0x48, 0x50,
	0x10, 0x12, 0x12, 0x0a, 0x0a, 0x06, 0x45, 0x72, 0x6c, 0x61, 0x6e, 0x67, 0x10, 0x13, 0x12, 0x0a,
	0x0a, 0x06, 0x45, 0x6c, 0x69, 0x78, 0x69, 0x72, 0x10, 0x14, 0x12, 0x0a, 0x0a, 0x06, 0x52, 0x61,
	0x63, 0x6b, 0x65, 0x74, 0x10, 0x15, 0x32, 0xe3, 0x05, 0x0a, 0x0c, 0x43, 0x72, 0x61, 0x77, 0x6c,
	0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0x64, 0x0a, 0x14, 0x47, 0x65, 0x74, 0x55, 0x73,
	0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12,
	0x2a, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x20, 0x2e, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x55, 0x73, 0x65, 0x72,
	0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x61, 0x0a,
	0x13, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d,
	0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x1f, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e,
	0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x12, 0x58, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x12, 0x26, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f,
	0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c, 0x2e, 0x63,
	0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x52, 0x65, 0x63,
	0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x12, 0x72, 0x0a, 0x15, 0x4d, 0x47,
	0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x12, 0x2b, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74,
	0x65, 0x73, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x2c, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x2e, 0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x6f,
	0x0a, 0x14, 0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69, 0x74,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x2a, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53,
	0x75, 0x62, 0x6d, 0x69, 0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x2b, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x2e, 0x4d, 0x47, 0x65, 0x74, 0x55, 0x73, 0x65, 0x72, 0x53, 0x75, 0x62, 0x6d, 0x69,
	0x74, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x66, 0x0a, 0x11, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e,
	0x74, 0x65, 0x73, 0x74, 0x12, 0x27, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x47, 0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43,
	0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e,
	0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x47,
	0x65, 0x74, 0x52, 0x65, 0x63, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x65, 0x73, 0x74, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x63, 0x0a, 0x10, 0x47, 0x65, 0x74, 0x44, 0x61,
	0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x26, 0x2e, 0x63, 0x72,
	0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44,
	0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x27, 0x2e, 0x63, 0x72, 0x61, 0x77, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x2e, 0x47, 0x65, 0x74, 0x44, 0x61, 0x69, 0x6c, 0x79, 0x51, 0x75, 0x65, 0x73,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_crawl_service_proto_rawDescOnce sync.Once
	file_pb_crawl_service_proto_rawDescData = file_pb_crawl_service_proto_rawDesc
)

func file_pb_crawl_service_proto_rawDescGZIP() []byte {
	file_pb_crawl_service_proto_rawDescOnce.Do(func() {
		file_pb_crawl_service_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_crawl_service_proto_rawDescData)
	})
	return file_pb_crawl_service_proto_rawDescData
}

var file_pb_crawl_service_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_pb_crawl_service_proto_msgTypes = make([]protoimpl.MessageInfo, 22)
var file_pb_crawl_service_proto_goTypes = []interface{}{
	(Verdict)(0),                             // 0: crawl_service.Verdict
	(ProgrammingLanguage)(0),                 // 1: crawl_service.ProgrammingLanguage
	(*GetUserContestRecordRequest)(nil),      // 2: crawl_service.GetUserContestRecordRequest
	(*UserContestRecord)(nil),                // 3: crawl_service.UserContestRecord
	(*GetUserSubmitRecordRequest)(nil),       // 4: crawl_service.GetUserSubmitRecordRequest
	(*SubmitRecordData)(nil),                 // 5: crawl_service.SubmitRecordData
	(*UserSubmitRecord)(nil),                 // 6: crawl_service.UserSubmitRecord
	(*GetRecentContestRequest)(nil),          // 7: crawl_service.GetRecentContestRequest
	(*RecentContest)(nil),                    // 8: crawl_service.RecentContest
	(*MGetUserContestRecordRequest)(nil),     // 9: crawl_service.MGetUserContestRecordRequest
	(*MGetUserContestRecordResponse)(nil),    // 10: crawl_service.MGetUserContestRecordResponse
	(*MGetUserSubmitRecordRequest)(nil),      // 11: crawl_service.MGetUserSubmitRecordRequest
	(*MGetUserSubmitRecordResponse)(nil),     // 12: crawl_service.MGetUserSubmitRecordResponse
	(*MGetRecentContestRequest)(nil),         // 13: crawl_service.MGetRecentContestRequest
	(*MGetRecentContestResponse)(nil),        // 14: crawl_service.MGetRecentContestResponse
	(*GetDailyQuestionRequest)(nil),          // 15: crawl_service.GetDailyQuestionRequest
	(*GetDailyQuestionResponse)(nil),         // 16: crawl_service.GetDailyQuestionResponse
	(*UserContestRecord_Record)(nil),         // 17: crawl_service.UserContestRecord.Record
	nil,                                      // 18: crawl_service.UserSubmitRecord.DistributionEntry
	nil,                                      // 19: crawl_service.UserSubmitRecord.OjDistributionEntry
	(*RecentContest_ContestMessage)(nil),     // 20: crawl_service.RecentContest.ContestMessage
	nil,                                      // 21: crawl_service.RecentContest.ContestMessage.ExtInfoEntry
	(*GetDailyQuestionResponse_Problem)(nil), // 22: crawl_service.GetDailyQuestionResponse.Problem
	nil,                                      // 23: crawl_service.GetDailyQuestionResponse.Problem.ExtraEntry
}
var file_pb_crawl_service_proto_depIdxs = []int32{
	17, // 0: crawl_service.UserContestRecord.record:type_name -> crawl_service.UserContestRecord.Record
	0,  // 1: crawl_service.SubmitRecordData.verdict:type_name -> crawl_service.Verdict
	1,  // 2: crawl_service.SubmitRecordData.programming_language:type_name -> crawl_service.ProgrammingLanguage
	18, // 3: crawl_service.UserSubmitRecord.distribution:type_name -> crawl_service.UserSubmitRecord.DistributionEntry
	19, // 4: crawl_service.UserSubmitRecord.oj_distribution:type_name -> crawl_service.UserSubmitRecord.OjDistributionEntry
	5,  // 5: crawl_service.UserSubmitRecord.submit_record_data:type_name -> crawl_service.SubmitRecordData
	20, // 6: crawl_service.RecentContest.recent_contest:type_name -> crawl_service.RecentContest.ContestMessage
	2,  // 7: crawl_service.MGetUserContestRecordRequest.get_user_contest_record_request:type_name -> crawl_service.GetUserContestRecordRequest
	3,  // 8: crawl_service.MGetUserContestRecordResponse.user_contest_record:type_name -> crawl_service.UserContestRecord
	4,  // 9: crawl_service.MGetUserSubmitRecordRequest.get_user_submit_record_request:type_name -> crawl_service.GetUserSubmitRecordRequest
	6,  // 10: crawl_service.MGetUserSubmitRecordResponse.user_submit_record:type_name -> crawl_service.UserSubmitRecord
	8,  // 11: crawl_service.MGetRecentContestResponse.recent_contest:type_name -> crawl_service.RecentContest
	22, // 12: crawl_service.GetDailyQuestionResponse.problem:type_name -> crawl_service.GetDailyQuestionResponse.Problem
	21, // 13: crawl_service.RecentContest.ContestMessage.ext_info:type_name -> crawl_service.RecentContest.ContestMessage.ExtInfoEntry
	23, // 14: crawl_service.GetDailyQuestionResponse.Problem.extra:type_name -> crawl_service.GetDailyQuestionResponse.Problem.ExtraEntry
	2,  // 15: crawl_service.CrawlService.GetUserContestRecord:input_type -> crawl_service.GetUserContestRecordRequest
	4,  // 16: crawl_service.CrawlService.GetUserSubmitRecord:input_type -> crawl_service.GetUserSubmitRecordRequest
	7,  // 17: crawl_service.CrawlService.GetRecentContest:input_type -> crawl_service.GetRecentContestRequest
	9,  // 18: crawl_service.CrawlService.MGetUserContestRecord:input_type -> crawl_service.MGetUserContestRecordRequest
	11, // 19: crawl_service.CrawlService.MGetUserSubmitRecord:input_type -> crawl_service.MGetUserSubmitRecordRequest
	13, // 20: crawl_service.CrawlService.MGetRecentContest:input_type -> crawl_service.MGetRecentContestRequest
	15, // 21: crawl_service.CrawlService.GetDailyQuestion:input_type -> crawl_service.GetDailyQuestionRequest
	3,  // 22: crawl_service.CrawlService.GetUserContestRecord:output_type -> crawl_service.UserContestRecord
	6,  // 23: crawl_service.CrawlService.GetUserSubmitRecord:output_type -> crawl_service.UserSubmitRecord
	8,  // 24: crawl_service.CrawlService.GetRecentContest:output_type -> crawl_service.RecentContest
	10, // 25: crawl_service.CrawlService.MGetUserContestRecord:output_type -> crawl_service.MGetUserContestRecordResponse
	12, // 26: crawl_service.CrawlService.MGetUserSubmitRecord:output_type -> crawl_service.MGetUserSubmitRecordResponse
	14, // 27: crawl_service.CrawlService.MGetRecentContest:output_type -> crawl_service.MGetRecentContestResponse
	16, // 28: crawl_service.CrawlService.GetDailyQuestion:output_type -> crawl_service.GetDailyQuestionResponse
	22, // [22:29] is the sub-list for method output_type
	15, // [15:22] is the sub-list for method input_type
	15, // [15:15] is the sub-list for extension type_name
	15, // [15:15] is the sub-list for extension extendee
	0,  // [0:15] is the sub-list for field type_name
}

func init() { file_pb_crawl_service_proto_init() }
func file_pb_crawl_service_proto_init() {
	if File_pb_crawl_service_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_pb_crawl_service_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserContestRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContestRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetUserSubmitRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubmitRecordData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserSubmitRecord); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetRecentContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentContest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetUserContestRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetUserContestRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetUserSubmitRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetUserSubmitRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetRecentContestRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MGetRecentContestResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyQuestionRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyQuestionResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UserContestRecord_Record); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RecentContest_ContestMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_pb_crawl_service_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GetDailyQuestionResponse_Problem); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_crawl_service_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   22,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_pb_crawl_service_proto_goTypes,
		DependencyIndexes: file_pb_crawl_service_proto_depIdxs,
		EnumInfos:         file_pb_crawl_service_proto_enumTypes,
		MessageInfos:      file_pb_crawl_service_proto_msgTypes,
	}.Build()
	File_pb_crawl_service_proto = out.File
	file_pb_crawl_service_proto_rawDesc = nil
	file_pb_crawl_service_proto_goTypes = nil
	file_pb_crawl_service_proto_depIdxs = nil
}
