// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: pb/crawl_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// CrawlServiceClient is the client API for CrawlService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CrawlServiceClient interface {
	GetUserContestRecord(ctx context.Context, in *GetUserContestRecordRequest, opts ...grpc.CallOption) (*UserContestRecord, error)
	GetUserSubmitRecord(ctx context.Context, in *GetUserSubmitRecordRequest, opts ...grpc.CallOption) (*UserSubmitRecord, error)
	GetRecentContest(ctx context.Context, in *GetRecentContestRequest, opts ...grpc.CallOption) (*RecentContest, error)
	MGetUserContestRecord(ctx context.Context, in *MGetUserContestRecordRequest, opts ...grpc.CallOption) (*MGetUserContestRecordResponse, error)
	MGetUserSubmitRecord(ctx context.Context, in *MGetUserSubmitRecordRequest, opts ...grpc.CallOption) (*MGetUserSubmitRecordResponse, error)
	MGetRecentContest(ctx context.Context, in *MGetRecentContestRequest, opts ...grpc.CallOption) (*MGetRecentContestResponse, error)
	GetDailyQuestion(ctx context.Context, in *GetDailyQuestionRequest, opts ...grpc.CallOption) (*GetDailyQuestionResponse, error)
}

type crawlServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewCrawlServiceClient(cc grpc.ClientConnInterface) CrawlServiceClient {
	return &crawlServiceClient{cc}
}

func (c *crawlServiceClient) GetUserContestRecord(ctx context.Context, in *GetUserContestRecordRequest, opts ...grpc.CallOption) (*UserContestRecord, error) {
	out := new(UserContestRecord)
	err := c.cc.Invoke(ctx, "/crawl_service.CrawlService/GetUserContestRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) GetUserSubmitRecord(ctx context.Context, in *GetUserSubmitRecordRequest, opts ...grpc.CallOption) (*UserSubmitRecord, error) {
	out := new(UserSubmitRecord)
	err := c.cc.Invoke(ctx, "/crawl_service.CrawlService/GetUserSubmitRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) GetRecentContest(ctx context.Context, in *GetRecentContestRequest, opts ...grpc.CallOption) (*RecentContest, error) {
	out := new(RecentContest)
	err := c.cc.Invoke(ctx, "/crawl_service.CrawlService/GetRecentContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) MGetUserContestRecord(ctx context.Context, in *MGetUserContestRecordRequest, opts ...grpc.CallOption) (*MGetUserContestRecordResponse, error) {
	out := new(MGetUserContestRecordResponse)
	err := c.cc.Invoke(ctx, "/crawl_service.CrawlService/MGetUserContestRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) MGetUserSubmitRecord(ctx context.Context, in *MGetUserSubmitRecordRequest, opts ...grpc.CallOption) (*MGetUserSubmitRecordResponse, error) {
	out := new(MGetUserSubmitRecordResponse)
	err := c.cc.Invoke(ctx, "/crawl_service.CrawlService/MGetUserSubmitRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) MGetRecentContest(ctx context.Context, in *MGetRecentContestRequest, opts ...grpc.CallOption) (*MGetRecentContestResponse, error) {
	out := new(MGetRecentContestResponse)
	err := c.cc.Invoke(ctx, "/crawl_service.CrawlService/MGetRecentContest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *crawlServiceClient) GetDailyQuestion(ctx context.Context, in *GetDailyQuestionRequest, opts ...grpc.CallOption) (*GetDailyQuestionResponse, error) {
	out := new(GetDailyQuestionResponse)
	err := c.cc.Invoke(ctx, "/crawl_service.CrawlService/GetDailyQuestion", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CrawlServiceServer is the server API for CrawlService service.
// All implementations must embed UnimplementedCrawlServiceServer
// for forward compatibility
type CrawlServiceServer interface {
	GetUserContestRecord(context.Context, *GetUserContestRecordRequest) (*UserContestRecord, error)
	GetUserSubmitRecord(context.Context, *GetUserSubmitRecordRequest) (*UserSubmitRecord, error)
	GetRecentContest(context.Context, *GetRecentContestRequest) (*RecentContest, error)
	MGetUserContestRecord(context.Context, *MGetUserContestRecordRequest) (*MGetUserContestRecordResponse, error)
	MGetUserSubmitRecord(context.Context, *MGetUserSubmitRecordRequest) (*MGetUserSubmitRecordResponse, error)
	MGetRecentContest(context.Context, *MGetRecentContestRequest) (*MGetRecentContestResponse, error)
	GetDailyQuestion(context.Context, *GetDailyQuestionRequest) (*GetDailyQuestionResponse, error)
	mustEmbedUnimplementedCrawlServiceServer()
}

// UnimplementedCrawlServiceServer must be embedded to have forward compatible implementations.
type UnimplementedCrawlServiceServer struct {
}

func (UnimplementedCrawlServiceServer) GetUserContestRecord(context.Context, *GetUserContestRecordRequest) (*UserContestRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserContestRecord not implemented")
}
func (UnimplementedCrawlServiceServer) GetUserSubmitRecord(context.Context, *GetUserSubmitRecordRequest) (*UserSubmitRecord, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserSubmitRecord not implemented")
}
func (UnimplementedCrawlServiceServer) GetRecentContest(context.Context, *GetRecentContestRequest) (*RecentContest, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetRecentContest not implemented")
}
func (UnimplementedCrawlServiceServer) MGetUserContestRecord(context.Context, *MGetUserContestRecordRequest) (*MGetUserContestRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetUserContestRecord not implemented")
}
func (UnimplementedCrawlServiceServer) MGetUserSubmitRecord(context.Context, *MGetUserSubmitRecordRequest) (*MGetUserSubmitRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetUserSubmitRecord not implemented")
}
func (UnimplementedCrawlServiceServer) MGetRecentContest(context.Context, *MGetRecentContestRequest) (*MGetRecentContestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MGetRecentContest not implemented")
}
func (UnimplementedCrawlServiceServer) GetDailyQuestion(context.Context, *GetDailyQuestionRequest) (*GetDailyQuestionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDailyQuestion not implemented")
}
func (UnimplementedCrawlServiceServer) mustEmbedUnimplementedCrawlServiceServer() {}

// UnsafeCrawlServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CrawlServiceServer will
// result in compilation errors.
type UnsafeCrawlServiceServer interface {
	mustEmbedUnimplementedCrawlServiceServer()
}

func RegisterCrawlServiceServer(s grpc.ServiceRegistrar, srv CrawlServiceServer) {
	s.RegisterService(&CrawlService_ServiceDesc, srv)
}

func _CrawlService_GetUserContestRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserContestRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).GetUserContestRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawl_service.CrawlService/GetUserContestRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).GetUserContestRecord(ctx, req.(*GetUserContestRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlService_GetUserSubmitRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserSubmitRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).GetUserSubmitRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawl_service.CrawlService/GetUserSubmitRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).GetUserSubmitRecord(ctx, req.(*GetUserSubmitRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlService_GetRecentContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRecentContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).GetRecentContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawl_service.CrawlService/GetRecentContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).GetRecentContest(ctx, req.(*GetRecentContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlService_MGetUserContestRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetUserContestRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).MGetUserContestRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawl_service.CrawlService/MGetUserContestRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).MGetUserContestRecord(ctx, req.(*MGetUserContestRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlService_MGetUserSubmitRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetUserSubmitRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).MGetUserSubmitRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawl_service.CrawlService/MGetUserSubmitRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).MGetUserSubmitRecord(ctx, req.(*MGetUserSubmitRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlService_MGetRecentContest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MGetRecentContestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).MGetRecentContest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawl_service.CrawlService/MGetRecentContest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).MGetRecentContest(ctx, req.(*MGetRecentContestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CrawlService_GetDailyQuestion_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDailyQuestionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CrawlServiceServer).GetDailyQuestion(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/crawl_service.CrawlService/GetDailyQuestion",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CrawlServiceServer).GetDailyQuestion(ctx, req.(*GetDailyQuestionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// CrawlService_ServiceDesc is the grpc.ServiceDesc for CrawlService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CrawlService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "crawl_service.CrawlService",
	HandlerType: (*CrawlServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserContestRecord",
			Handler:    _CrawlService_GetUserContestRecord_Handler,
		},
		{
			MethodName: "GetUserSubmitRecord",
			Handler:    _CrawlService_GetUserSubmitRecord_Handler,
		},
		{
			MethodName: "GetRecentContest",
			Handler:    _CrawlService_GetRecentContest_Handler,
		},
		{
			MethodName: "MGetUserContestRecord",
			Handler:    _CrawlService_MGetUserContestRecord_Handler,
		},
		{
			MethodName: "MGetUserSubmitRecord",
			Handler:    _CrawlService_MGetUserSubmitRecord_Handler,
		},
		{
			MethodName: "MGetRecentContest",
			Handler:    _CrawlService_MGetRecentContest_Handler,
		},
		{
			MethodName: "GetDailyQuestion",
			Handler:    _CrawlService_GetDailyQuestion_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/crawl_service.proto",
}
